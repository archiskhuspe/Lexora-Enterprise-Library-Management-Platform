{
	"info": {
		"_postman_id": "YOUR_COLLECTION_ID",
		"name": "Library Management System API",
		"description": "Postman collection for the Library Management System API.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"description": "User authentication and registration.",
			"item": [
				{
					"name": "Sign Up - New User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"testuser\",\n  \"email\": \"testuser@example.com\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/signup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"signup"
							]
						},
						"description": "Signs up a new regular user."
					},
					"response": []
				},
				{
					"name": "Sign Up - New Librarian",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"librarianuser\",\n  \"email\": \"librarian@example.com\",\n  \"password\": \"password123\",\n  \"registrationCode\": \"MakeMeALibrarian123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/signup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"signup"
							]
						},
						"description": "Signs up a new librarian using the registration code."
					},
					"response": []
				},
				{
					"name": "Sign In (Login)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"jwt_token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/signin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"signin"
							]
						},
						"description": "Signs in a user and attempts to automatically store the JWT in the 'jwt_token' collection variable."
					},
					"response": []
				},
				{
					"name": "Sign In (Librarian)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"jwt_token\", jsonData.token);",
									"console.log(\"Librarian JWT set:\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"librarianuser\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/signin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"signin"
							]
						},
						"description": "Signs in a LIBRARIAN user (e.g., one created with registration code). Ensure credentials match a librarian. Attempts to store JWT."
					},
					"response": []
				},
				{
					"name": "Sign Out (Client Action - Clears Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"jwt_token\", \"\");",
									"console.log(\"jwt_token collection variable has been cleared.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text",
								"description": "Send current token if available, though endpoint might not validate it for signout."
							}
						],
						"body": {},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/signout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"signout"
							]
						},
						"description": "Simulates client-side logout for JWT. Server-side, this endpoint might not perform JWT invalidation without a denylist. This request's primary Postman function is to run a test script that clears the 'jwt_token' collection variable."
					},
					"response": []
				}
			]
		},
		{
			"name": "Book Management",
			"description": "Operations for managing books.",
			"item": [
				{
					"name": "Get All Books",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/books?page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"books"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						},
						"description": "Retrieves a paginated list of all books. Requires authentication."
					},
					"response": []
				},
				{
					"name": "Search Books",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/books?title=Spring&author=",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"books"
							],
							"query": [
								{
									"key": "title",
									"value": "Spring",
									"description": "Search by book title (e.g., Spring, Lord of the Rings)"
								},
								{
									"key": "author",
									"value": "",
									"description": "Search by book author (e.g., Tolkien, Bloch)"
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "title,asc",
									"disabled": true
								}
							]
						},
						"description": "Searches books by title or author using query parameters. Requires authentication. Pagination parameters (page, size, sort) can also be used."
					},
					"response": []
				},
				{
					"name": "Get Book by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/books/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"books",
								"1"
							]
						},
						"description": "Retrieves a specific book by its ID. Replace '1' with an actual book ID. Requires authentication."
					},
					"response": []
				},
				{
					"name": "Add New Book",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}", 
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Effective Java\",\n  \"author\": \"Joshua Bloch\",\n  \"isbn\": \"978-0134685991\",\n  \"publishedDate\": \"2017-12-27\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"books"
							]
						},
						"description": "Adds a new book. Requires ROLE_LIBRARIAN. Ensure jwt_token is from a librarian user."
					},
					"response": []
				},
				{
					"name": "Update Existing Book",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Effective Java, 3rd Edition Updated\",\n  \"author\": \"Joshua Bloch\",\n  \"isbn\": \"978-0134685991\",\n  \"publishedDate\": \"2018-01-06\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/books/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"books",
								"1"
							]
						},
						"description": "Updates an existing book by its ID. Replace '1' with an actual book ID. Requires ROLE_LIBRARIAN."
					},
					"response": []
				},
				{
					"name": "Delete Book",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/books/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"books",
								"1"
							]
						},
						"description": "Deletes a book by its ID (soft delete). Replace '1' with an actual book ID. Requires ROLE_LIBRARIAN."
					},
					"response": []
				}
			]
		},
		{
			"name": "Member Management",
			"description": "Operations for managing members.",
			"item": [
				{
					"name": "Get All Members",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/members",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"members"
							]
						},
						"description": "Retrieves a paginated list of all members. Requires ROLE_LIBRARIAN."
					},
					"response": []
				},
				{
					"name": "Get Member by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/members/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"members",
								"1"
							]
						},
						"description": "Retrieves a specific member by their ID. Replace '1' with an actual member ID. Requires ROLE_LIBRARIAN."
					},
					"response": []
				},
				{
					"name": "Add New Member",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Jane Doe\",\n  \"email\": \"jane.doe@example.com\",\n  \"joinDate\": \"2023-01-15\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/members",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"members"
							]
						},
						"description": "Adds a new member. Requires ROLE_LIBRARIAN."
					},
					"response": []
				},
				{
					"name": "Update Existing Member",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Jane D. Smith Updated\",\n  \"email\": \"jane.smith.updated@example.com\",\n  \"joinDate\": \"2023-01-15\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/members/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"members",
								"1"
							]
						},
						"description": "Updates an existing member by their ID. Replace '1' with an actual member ID. Requires ROLE_LIBRARIAN."
					},
					"response": []
				},
				{
					"name": "Delete Member",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/members/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"members",
								"1"
							]
						},
						"description": "Deletes a member by their ID (soft delete). Replace '1' with an actual member ID. Requires ROLE_LIBRARIAN."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "YOUR_JWT_TOKEN_HERE", 
			"type": "string",
			"description": "Replace with JWT token obtained after sign-in. The Sign In request attempts to set this automatically."
		}
	]
} 